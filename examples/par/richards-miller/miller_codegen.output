    |\^/|     Maple 2016 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2016
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> restart;
# hydraulic conductivity and its derivatives
> hydcon:=psi->ks*(1-(alpha*abs(psi))^(n-1)*(1+(alpha*abs(psi))^n)^(-m))^2/(1+(alpha*abs(psi))^n)^(m/2);
                                          (n - 1)                     n (-m) 2
                   ks (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )
  hydcon := psi -> -----------------------------------------------------------
                                                       n (m/2)
                                   (1 + (alpha | psi |) )

> dhydco:=D(hydcon);
                                                                              /
                                          (n - 1)                     n (-m)  |
dhydco := psi -> 2 ks (1 - (alpha | psi |)        (1 + (alpha | psi |) )    ) |
                                                                              \

                     (n - 1)                                         n (-m)
      (alpha | psi |)        (n - 1) abs(1, psi) (1 + (alpha | psi |) )
    - --------------------------------------------------------------------- +
                                     | psi |

                   (n - 1)                     n (-m)                  n
    (alpha | psi |)        (1 + (alpha | psi |) )     m (alpha | psi |)  n

                                                    \
                  /                              n  |   /
    abs(1, psi)  /  (| psi | (1 + (alpha | psi |) ))|  /
                /                                   / /

                        n (m/2)
    (1 + (alpha | psi |) )      - 1/2 ks

                        (n - 1)                     n (-m) 2                  n
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m (alpha | psi |)

                    /                      n (m/2)
    n abs(1, psi)  /  ((1 + (alpha | psi |) )      | psi |
                  /

                        n
    (1 + (alpha | psi |) ))

> ddhydc:=D(dhydco);
                      /
                      |
ddhydc := psi -> 2 ks |
                      \

                     (n - 1)                                         n (-m)
      (alpha | psi |)        (n - 1) abs(1, psi) (1 + (alpha | psi |) )
    - --------------------------------------------------------------------- +
                                     | psi |

                   (n - 1)                     n (-m)                  n
    (alpha | psi |)        (1 + (alpha | psi |) )     m (alpha | psi |)  n

                                                    \2
                  /                              n  |    /
    abs(1, psi)  /  (| psi | (1 + (alpha | psi |) ))|   /
                /                                   /  /

                        n (m/2)
    (1 + (alpha | psi |) )      - 2 ks

                                                            /
                        (n - 1)                     n (-m)  |
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    ) |
                                                            \

                     (n - 1)                                         n (-m)
      (alpha | psi |)        (n - 1) abs(1, psi) (1 + (alpha | psi |) )
    - --------------------------------------------------------------------- +
                                     | psi |

                   (n - 1)                     n (-m)                  n
    (alpha | psi |)        (1 + (alpha | psi |) )     m (alpha | psi |)  n

                                                    \
                  /                              n  |                  n
    abs(1, psi)  /  (| psi | (1 + (alpha | psi |) ))| m (alpha | psi |)  n
                /                                   /

                  /                      n (m/2)                             n
    abs(1, psi)  /  ((1 + (alpha | psi |) )      | psi | (1 + (alpha | psi |) )
                /

                                                                     /
                                 (n - 1)                     n (-m)  |
    ) + 2 ks (1 - (alpha | psi |)        (1 + (alpha | psi |) )    ) |
                                                                     |
                                                                     \

                     (n - 1)        2            2                     n (-m)
      (alpha | psi |)        (n - 1)  abs(1, psi)  (1 + (alpha | psi |) )
    - -----------------------------------------------------------------------
                                            2
                                     | psi |

                      (n - 1)                                            n (-m)
       (alpha | psi |)        (n - 1) signum(1, psi) (1 + (alpha | psi |) )
     - ------------------------------------------------------------------------
                                       | psi |

                      (n - 1)                    2                     n (-m)
       (alpha | psi |)        (n - 1) abs(1, psi)  (1 + (alpha | psi |) )
     + ----------------------------------------------------------------------
                                             2
                                      | psi |

                        (n - 1)                    2                     n (-m)
     + 2 (alpha | psi |)        (n - 1) abs(1, psi)  (1 + (alpha | psi |) )

                     n     /         2                     n
    m (alpha | psi |)  n  /  (| psi |  (1 + (alpha | psi |) )) -
                         /

                   (n - 1)                     n (-m)  2                 n 2  2
    (alpha | psi |)        (1 + (alpha | psi |) )     m  ((alpha | psi |) )  n

               2   /         2                     n 2
    abs(1, psi)   /  (| psi |  (1 + (alpha | psi |) ) ) +
                 /

                   (n - 1)                     n (-m)                  n  2
    (alpha | psi |)        (1 + (alpha | psi |) )     m (alpha | psi |)  n

               2   /         2                     n                    (n - 1)
    abs(1, psi)   /  (| psi |  (1 + (alpha | psi |) )) + (alpha | psi |)
                 /

                        n (-m)                  n                    /
    (1 + (alpha | psi |) )     m (alpha | psi |)  n signum(1, psi)  /  (| psi |
                                                                   /

                        n                    (n - 1)                     n (-m)
    (1 + (alpha | psi |) )) - (alpha | psi |)        (1 + (alpha | psi |) )

                     n              2   /         2                     n
    m (alpha | psi |)  n abs(1, psi)   /  (| psi |  (1 + (alpha | psi |) )) -
                                      /

                   (n - 1)                     n (-m)                   n 2  2
    (alpha | psi |)        (1 + (alpha | psi |) )     m ((alpha | psi |) )  n

                                                       \
               2   /         2                     n 2 |   /
    abs(1, psi)   /  (| psi |  (1 + (alpha | psi |) ) )|  /
                 /                                     | /
                                                       /

                        n (m/2)
    (1 + (alpha | psi |) )      + 1/4 ks

                        (n - 1)                     n (-m) 2  2
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m

                    n 2  2            2   /                      n (m/2)
    ((alpha | psi |) )  n  abs(1, psi)   /  ((1 + (alpha | psi |) )
                                        /

           2                     n 2
    | psi |  (1 + (alpha | psi |) ) ) - 1/2 ks

                        (n - 1)                     n (-m) 2                  n
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m (alpha | psi |)

     2            2   /                      n (m/2)        2
    n  abs(1, psi)   /  ((1 + (alpha | psi |) )      | psi |
                    /

                        n
    (1 + (alpha | psi |) )) - 1/2 ks

                        (n - 1)                     n (-m) 2                  n
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m (alpha | psi |)

                       /                      n (m/2)
    n signum(1, psi)  /  ((1 + (alpha | psi |) )      | psi |
                     /

                        n
    (1 + (alpha | psi |) )) + 1/2 ks

                        (n - 1)                     n (-m) 2                  n
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m (alpha | psi |)

                 2   /                      n (m/2)        2
    n abs(1, psi)   /  ((1 + (alpha | psi |) )      | psi |
                   /

                        n
    (1 + (alpha | psi |) )) + 1/2 ks

                        (n - 1)                     n (-m) 2
    (1 - (alpha | psi |)        (1 + (alpha | psi |) )    )  m

                    n 2  2            2   /                      n (m/2)
    ((alpha | psi |) )  n  abs(1, psi)   /  ((1 + (alpha | psi |) )
                                        /

           2                     n 2
    | psi |  (1 + (alpha | psi |) ) )

> 
# volumetric water content and its derivatives
> volcon:=psi->(thetas-thetar)/(1+(alpha*abs(psi))^n)^m + thetar;
                                    thetas - thetar
               volcon := psi -> ----------------------- + thetar
                                                    n m
                                (1 + (alpha | psi |) )

> dvolco:=D(volcon);
                                                           n
                        (thetas - thetar) m (alpha | psi |)  n abs(1, psi)
   dvolco := psi -> - ------------------------------------------------------
                                          n m                             n
                      (1 + (alpha | psi |) )  | psi | (1 + (alpha | psi |) )

> ddvolc:=D(dvolco);
                                    2                 n 2  2            2
                 (thetas - thetar) m  ((alpha | psi |) )  n  abs(1, psi)
ddvolc := psi -> --------------------------------------------------------
                                     n m        2                     n 2
                 (1 + (alpha | psi |) )  | psi |  (1 + (alpha | psi |) )

                                           n  2            2
        (thetas - thetar) m (alpha | psi |)  n  abs(1, psi)
     - -------------------------------------------------------
                           n m        2                     n
       (1 + (alpha | psi |) )  | psi |  (1 + (alpha | psi |) )

                                          n
       (thetas - thetar) m (alpha | psi |)  n signum(1, psi)
     - ------------------------------------------------------
                           n m                             n
       (1 + (alpha | psi |) )  | psi | (1 + (alpha | psi |) )

                                            n              2
         (thetas - thetar) m (alpha | psi |)  n abs(1, psi)
     + -------------------------------------------------------
                           n m        2                     n
       (1 + (alpha | psi |) )  | psi |  (1 + (alpha | psi |) )

                                           n 2  2            2
       (thetas - thetar) m ((alpha | psi |) )  n  abs(1, psi)
     + --------------------------------------------------------
                           n m        2                     n 2
       (1 + (alpha | psi |) )  | psi |  (1 + (alpha | psi |) )

> 
> 
> with(CodeGeneration);
[C, CSharp, Fortran, IntermediateCode, Java, JavaScript, Julia,

    LanguageDefinition, Matlab, Names, Perl, Python, R, Save, Translate,

    VisualBasic]

> with(codegen);
[C, GRAD, GRADIENT, HESSIAN, JACOBIAN, MathML, cost, declare, dontreturn, eqn,

    fortran, horner, intrep2maple, joinprocs, makeglobal, makeparam, makeproc,

    makevoid, maple2intrep, optimize, packargs, packlocals, packparams,

    prep2trans, renamevar, split, swapargs]

> 
# Generate code
#
# NOTE: The code will need to be copied into the source file
# manually. Don't forget to add the common block with var names!
#
> Fortran(hydcon,deducetypes=false,defaulttype=float);
memory used=4.1MB, alloc=8.3MB, time=0.14
Warning, procedure/module options ignored
      doubleprecision function hydcon (psi)
        doubleprecision psi
        hydcon = ks * (0.1D1 - (alpha * abs(psi)) ** (n - 0.1D1) * (0.1D
     #1 + (alpha * abs(psi)) ** n) ** (-m)) ** 2 / (0.1D1 + (alpha * abs
     #(psi)) ** n) ** (m / 0.2D1)
        return
      end
> Fortran(dhydco,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function dhydco (psi)
        doubleprecision psi
        dhydco = 0.2D1 * ks * (0.1D1 - (alpha * abs(psi)) ** (n - 0.1D1)
     # * (0.1D1 + (alpha * abs(psi)) ** n) ** (-m)) / (0.1D1 + (alpha * 
     #abs(psi)) ** n) ** (m / 0.2D1) * (-(alpha * abs(psi)) ** (n - 0.1D
     #1) * (n - 0.1D1) * abs(psi) / psi / abs(psi) * (0.1D1 + (alpha * a
     #bs(psi)) ** n) ** (-m) + (alpha * abs(psi)) ** (n - 0.1D1) * (0.1D
     #1 + (alpha * abs(psi)) ** n) ** (-m) * m * (alpha * abs(psi)) ** n
     # * n * abs(psi) / psi / abs(psi) / (0.1D1 + (alpha * abs(psi)) ** 
     #n)) - ks * (0.1D1 - (alpha * abs(psi)) ** (n - 0.1D1) * (0.1D1 + (
     #alpha * abs(psi)) ** n) ** (-m)) ** 2 / (0.1D1 + (alpha * abs(psi)
     #) ** n) ** (m / 0.2D1) * m * (alpha * abs(psi)) ** n * n * abs(psi
     #) / psi / abs(psi) / (0.1D1 + (alpha * abs(psi)) ** n) / 0.2D1
        return
      end
> codegen[split](ddhydc);
proc(psi)
local s0, s1, s10, s100, s101, s102, s103, s104, s105, s106, s107, s108,
s109, s11, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s12,
s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s13, s130, s131,
s132, s133, s134, s135, s136, s137, s138, s139, s14, s140, s141, s142, s143,
s144, s145, s146, s147, s148, s149, s15, s150, s151, s152, s153, s154, s155,
s156, s157, s158, s159, s16, s160, s161, s162, s163, s164, s165, s166, s167,
s168, s169, s17, s170, s171, s172, s173, s174, s175, s176, s177, s178, s179,
s18, s180, s181, s182, s183, s184, s185, s186, s187, s188, s189, s19, s190,
s191, s192, s193, s194, s195, s196, s197, s198, s199, s2, s20, s200, s201,
s202, s203, s204, s205, s206, s207, s208, s209, s21, s210, s211, s212, s213,
s214, s215, s216, s217, s218, s219, s22, s220, s221, s222, s223, s224, s225,
s226, s227, s228, s229, s23, s230, s231, s232, s233, s234, s235, s236, s237,
s24, s25, s26, s27, s28, s29, s3, s30, s31, s32, s33, s34, s35, s36, s37,
s38, s39, s4, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s5, s50,
s51, s52, s53, s54, s55, s56, s57, s58, s59, s6, s60, s61, s62, s63, s64,
s65, s66, s67, s68, s69, s7, s70, s71, s72, s73, s74, s75, s76, s77, s78,
s79, s8, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s9, s90, s91,
s92, s93, s94, s95, s96, s97, s98, s99;
option operator, arrow;
    s0 := alpha*abs(psi);
    s1 := n - 1;
    s2 := abs(psi);
    s3 := alpha*s2;
    s4 := 1 + s3^n;
    s5 := -m;
    s6 := s0^s1*s4^s5;
    s7 := abs(1, psi)/s2;
    s8 := alpha*s2;
    s9 := n - 1;
    s10 := alpha*s2;
    s11 := 1 + s10^n;
    s12 := -m;
    s13 := alpha*s2;
    s14 := alpha*s2;
    s15 := 1 + s14^n;
    s16 := s7*s11^s12;
    s17 := s13^n*s8^s9;
    s18 := s16*s17;
    s19 := (-n + 1)*s6*s7 + m*n*s18/s15;
    s20 := alpha*s2;
    s21 := 1 + s20^n;
    s22 := m/2;
    s23 := s21^s22;
    s24 := alpha*s2;
    s25 := n - 1;
    s26 := alpha*s2;
    s27 := 1 + s26^n;
    s28 := -m;
    s29 := alpha*s2;
    s30 := 1 + s29^n;
    s31 := m/2;
    s32 := s30^s31;
    s33 := alpha*s2;
    s34 := n - 1;
    s35 := alpha*s2;
    s36 := 1 + s35^n;
    s37 := -m;
    s38 := s7*s33^s34;
    s39 := alpha*s2;
    s40 := n - 1;
    s41 := alpha*s2;
    s42 := 1 + s41^n;
    s43 := -m;
    s44 := alpha*s2;
    s45 := alpha*s2;
    s46 := 1 + s45^n;
    s47 := s7*s39^s40;
    s48 := s42^s43*s44^n;
    s49 := s47*s48;
    s50 := alpha*s2;
    s51 := alpha*s2;
    s52 := 1 + s51^n;
    s53 := s7*s50^n;
    s54 := 1/(s32*s52);
    s55 := (1 - s24^s25*s27^s28)*((-n + 1)*s38*s36^s37 + m*n*s49/s46);
    s56 := s53*s54;
    s57 := alpha*s2;
    s58 := n - 1;
    s59 := alpha*s2;
    s60 := 1 + s59^n;
    s61 := -m;
    s62 := alpha*s2;
    s63 := 1 + s62^n;
    s64 := m/2;
    s65 := s63^s64;
    s66 := alpha*s2;
    s67 := n - 1;
    s68 := abs(1, psi);
    s69 := alpha*s2;
    s70 := 1 + s69^n;
    s71 := -m;
    s72 := s66^s67*s70^s71;
    s73 := s68^2/s2^2;
    s74 := alpha*s2;
    s75 := n - 1;
    s76 := alpha*s2;
    s77 := 1 + s76^n;
    s78 := -m;
    s79 := s74^s75*s77^s78;
    s80 := signum(1, psi)/s2;
    s81 := alpha*s2;
    s82 := n - 1;
    s83 := alpha*s2;
    s84 := 1 + s83^n;
    s85 := -m;
    s86 := s73*s81^s82;
    s87 := alpha*s2;
    s88 := n - 1;
    s89 := alpha*s2;
    s90 := 1 + s89^n;
    s91 := -m;
    s92 := alpha*s2;
    s93 := alpha*s2;
    s94 := 1 + s93^n;
    s95 := s73*s87^s88;
    s96 := s90^s91*s92^n;
    s97 := s95*s96;
    s98 := alpha*s2;
    s99 := n - 1;
    s100 := alpha*s2;
    s101 := 1 + s100^n;
    s102 := -m;
    s103 := alpha*s2;
    s104 := s103^n;
    s105 := alpha*s2;
    s106 := 1 + s105^n;
    s107 := s73*s101^s102;
    s108 := s98^s99*s104^2;
    s109 := s107*s108;
    s110 := alpha*s2;
    s111 := n - 1;
    s112 := alpha*s2;
    s113 := 1 + s112^n;
    s114 := -m;
    s115 := alpha*s2;
    s116 := alpha*s2;
    s117 := 1 + s116^n;
    s118 := s73*s110^s111;
    s119 := s113^s114*s115^n;
    s120 := s118*s119;
    s121 := alpha*s2;
    s122 := n - 1;
    s123 := alpha*s2;
    s124 := 1 + s123^n;
    s125 := -m;
    s126 := alpha*s2;
    s127 := alpha*s2;
    s128 := 1 + s127^n;
    s129 := s80*s121^s122;
    s130 := s124^s125*s126^n;
    s131 := s129*s130;
    s132 := alpha*s2;
    s133 := n - 1;
    s134 := alpha*s2;
    s135 := 1 + s134^n;
    s136 := -m;
    s137 := alpha*s2;
    s138 := alpha*s2;
    s139 := 1 + s138^n;
    s140 := s73*s132^s133;
    s141 := s135^s136*s137^n;
    s142 := s140*s141;
    s143 := alpha*s2;
    s144 := n - 1;
    s145 := alpha*s2;
    s146 := 1 + s145^n;
    s147 := -m;
    s148 := alpha*s2;
    s149 := s148^n;
    s150 := alpha*s2;
    s151 := 1 + s150^n;
    s152 := s73*s143^s144;
    s153 := s146^s147*s149^2;
    s154 := s152*s153;
    s155 := (1 - s57^s58*s60^s61)/s65;
    s156 := alpha*s2;
    s157 := n - 1;
    s158 := alpha*s2;
    s159 := 1 + s158^n;
    s160 := -m;
    s161 := 1 - s156^s157*s159^s160;
    s162 := alpha*s2;
    s163 := 1 + s162^n;
    s164 := m/2;
    s165 := s163^s164;
    s166 := alpha*s2;
    s167 := s166^n;
    s168 := alpha*s2;
    s169 := 1 + s168^n;
    s170 := s73*s161^2;
    s171 := s167^2/s165;
    s172 := s170*s171;
    s173 := alpha*s2;
    s174 := n - 1;
    s175 := alpha*s2;
    s176 := 1 + s175^n;
    s177 := -m;
    s178 := 1 - s173^s174*s176^s177;
    s179 := alpha*s2;
    s180 := 1 + s179^n;
    s181 := m/2;
    s182 := s180^s181;
    s183 := alpha*s2;
    s184 := alpha*s2;
    s185 := 1 + s184^n;
    s186 := s73*s183^n;
    s187 := s178^2/s182;
    s188 := s186*s187;
    s189 := alpha*s2;
    s190 := n - 1;
    s191 := alpha*s2;
    s192 := 1 + s191^n;
    s193 := -m;
    s194 := 1 - s189^s190*s192^s193;
    s195 := alpha*s2;
    s196 := 1 + s195^n;
    s197 := m/2;
    s198 := s196^s197;
    s199 := alpha*s2;
    s200 := alpha*s2;
    s201 := 1 + s200^n;
    s202 := s80*s199^n;
    s203 := s194^2/s198;
    s204 := s202*s203;
    s205 := alpha*s2;
    s206 := n - 1;
    s207 := alpha*s2;
    s208 := 1 + s207^n;
    s209 := -m;
    s210 := 1 - s205^s206*s208^s209;
    s211 := alpha*s2;
    s212 := 1 + s211^n;
    s213 := m/2;
    s214 := s212^s213;
    s215 := alpha*s2;
    s216 := alpha*s2;
    s217 := 1 + s216^n;
    s218 := s73*s215^n;
    s219 := s210^2/s214;
    s220 := s218*s219;
    s221 := alpha*s2;
    s222 := n - 1;
    s223 := alpha*s2;
    s224 := 1 + s223^n;
    s225 := -m;
    s226 := 1 - s221^s222*s224^s225;
    s227 := alpha*s2;
    s228 := 1 + s227^n;
    s229 := m/2;
    s230 := s228^s229;
    s231 := alpha*s2;
    s232 := s231^n;
    s233 := alpha*s2;
    s234 := 1 + s233^n;
    s235 := s73*s226^2;
    s236 := s232^2/s230;
    s237 := s235*s236;
    return 2*ks*s19^2/s23 - 2*ks*m*n*s55*s56 + 2*ks*s155*(
        -(n - 1)^2*s72*s73 + (-n + 1)*s79*s80 + (n - 1)*s86*s84^s85
         + (2*n - 2)*m*n*s97/s94 - m^2*n^2*s109/s106^2 + m*n^2*s120/s117
         + m*n*s131/s128 - m*n*s142/s139 - m*n^2*s154/s151^2)
         + 1/4*ks*m^2*n^2*s172/s169^2 - 1/2*ks*m*n^2*s188/s185
         - 1/2*ks*m*n*s204/s201 + 1/2*ks*m*n*s220/s217
         + 1/2*ks*m*n^2*s237/s234^2
end proc

> Fortran(%,optimize=true,deducetypes=false,defaulttype=float);
Warning, unable to optimize
memory used=37.5MB, alloc=44.3MB, time=0.66
Warning, the function names {signum} are not recognized in the target language
Warning, procedure/module options ignored
      doubleprecision function cg (psi)
        doubleprecision psi
        doubleprecision s0
        doubleprecision s1
        doubleprecision s10
        doubleprecision s100
        doubleprecision s101
        doubleprecision s102
        doubleprecision s103
        doubleprecision s104
        doubleprecision s105
        doubleprecision s106
        doubleprecision s107
        doubleprecision s108
        doubleprecision s109
        doubleprecision s11
        doubleprecision s110
        doubleprecision s111
        doubleprecision s112
        doubleprecision s113
        doubleprecision s114
        doubleprecision s115
        doubleprecision s116
        doubleprecision s117
        doubleprecision s118
        doubleprecision s119
        doubleprecision s12
        doubleprecision s120
        doubleprecision s121
        doubleprecision s122
        doubleprecision s123
        doubleprecision s124
        doubleprecision s125
        doubleprecision s126
        doubleprecision s127
        doubleprecision s128
        doubleprecision s129
        doubleprecision s13
        doubleprecision s130
        doubleprecision s131
        doubleprecision s132
        doubleprecision s133
        doubleprecision s134
        doubleprecision s135
        doubleprecision s136
        doubleprecision s137
        doubleprecision s138
        doubleprecision s139
        doubleprecision s14
        doubleprecision s140
        doubleprecision s141
        doubleprecision s142
        doubleprecision s143
        doubleprecision s144
        doubleprecision s145
        doubleprecision s146
        doubleprecision s147
        doubleprecision s148
        doubleprecision s149
        doubleprecision s15
        doubleprecision s150
        doubleprecision s151
        doubleprecision s152
        doubleprecision s153
        doubleprecision s154
        doubleprecision s155
        doubleprecision s156
        doubleprecision s157
        doubleprecision s158
        doubleprecision s159
        doubleprecision s16
        doubleprecision s160
        doubleprecision s161
        doubleprecision s162
        doubleprecision s163
        doubleprecision s164
        doubleprecision s165
        doubleprecision s166
        doubleprecision s167
        doubleprecision s168
        doubleprecision s169
        doubleprecision s17
        doubleprecision s170
        doubleprecision s171
        doubleprecision s172
        doubleprecision s173
        doubleprecision s174
        doubleprecision s175
        doubleprecision s176
        doubleprecision s177
        doubleprecision s178
        doubleprecision s179
        doubleprecision s18
        doubleprecision s180
        doubleprecision s181
        doubleprecision s182
        doubleprecision s183
        doubleprecision s184
        doubleprecision s185
        doubleprecision s186
        doubleprecision s187
        doubleprecision s188
        doubleprecision s189
        doubleprecision s19
        doubleprecision s190
        doubleprecision s191
        doubleprecision s192
        doubleprecision s193
        doubleprecision s194
        doubleprecision s195
        doubleprecision s196
        doubleprecision s197
        doubleprecision s198
        doubleprecision s199
        doubleprecision s2
        doubleprecision s20
        doubleprecision s200
        doubleprecision s201
        doubleprecision s202
        doubleprecision s203
        doubleprecision s204
        doubleprecision s205
        doubleprecision s206
        doubleprecision s207
        doubleprecision s208
        doubleprecision s209
        doubleprecision s21
        doubleprecision s210
        doubleprecision s211
        doubleprecision s212
        doubleprecision s213
        doubleprecision s214
        doubleprecision s215
        doubleprecision s216
        doubleprecision s217
        doubleprecision s218
        doubleprecision s219
        doubleprecision s22
        doubleprecision s220
        doubleprecision s221
        doubleprecision s222
        doubleprecision s223
        doubleprecision s224
        doubleprecision s225
        doubleprecision s226
        doubleprecision s227
        doubleprecision s228
        doubleprecision s229
        doubleprecision s23
        doubleprecision s230
        doubleprecision s231
        doubleprecision s232
        doubleprecision s233
        doubleprecision s234
        doubleprecision s235
        doubleprecision s236
        doubleprecision s237
        doubleprecision s24
        doubleprecision s25
        doubleprecision s26
        doubleprecision s27
        doubleprecision s28
        doubleprecision s29
        doubleprecision s3
        doubleprecision s30
        doubleprecision s31
        doubleprecision s32
        doubleprecision s33
        doubleprecision s34
        doubleprecision s35
        doubleprecision s36
        doubleprecision s37
        doubleprecision s38
        doubleprecision s39
        doubleprecision s4
        doubleprecision s40
        doubleprecision s41
        doubleprecision s42
        doubleprecision s43
        doubleprecision s44
        doubleprecision s45
        doubleprecision s46
        doubleprecision s47
        doubleprecision s48
        doubleprecision s49
        doubleprecision s5
        doubleprecision s50
        doubleprecision s51
        doubleprecision s52
        doubleprecision s53
        doubleprecision s54
        doubleprecision s55
        doubleprecision s56
        doubleprecision s57
        doubleprecision s58
        doubleprecision s59
        doubleprecision s6
        doubleprecision s60
        doubleprecision s61
        doubleprecision s62
        doubleprecision s63
        doubleprecision s64
        doubleprecision s65
        doubleprecision s66
        doubleprecision s67
        doubleprecision s68
        doubleprecision s69
        doubleprecision s7
        doubleprecision s70
        doubleprecision s71
        doubleprecision s72
        doubleprecision s73
        doubleprecision s74
        doubleprecision s75
        doubleprecision s76
        doubleprecision s77
        doubleprecision s78
        doubleprecision s79
        doubleprecision s8
        doubleprecision s80
        doubleprecision s81
        doubleprecision s82
        doubleprecision s83
        doubleprecision s84
        doubleprecision s85
        doubleprecision s86
        doubleprecision s87
        doubleprecision s88
        doubleprecision s89
        doubleprecision s9
        doubleprecision s90
        doubleprecision s91
        doubleprecision s92
        doubleprecision s93
        doubleprecision s94
        doubleprecision s95
        doubleprecision s96
        doubleprecision s97
        doubleprecision s98
        doubleprecision s99
        s0 = alpha * abs(psi)
        s1 = n - 0.1D1
        s2 = abs(psi)
        s3 = alpha * s2
        s4 = 0.1D1 + s3 ** n
        s5 = -m
        s6 = s0 ** s1 * s4 ** s5
        s7 = 0.1D1 / s2 * abs(psi) / psi
        s8 = alpha * s2
        s9 = n - 0.1D1
        s10 = alpha * s2
        s11 = 0.1D1 + s10 ** n
        s12 = -m
        s13 = alpha * s2
        s14 = alpha * s2
        s15 = 0.1D1 + s14 ** n
        s16 = s7 * s11 ** s12
        s17 = s13 ** n * s8 ** s9
        s18 = s16 * s17
        s19 = (-n + 0.1D1) * s6 * s7 + m * n * s18 / s15
        s20 = alpha * s2
        s21 = 0.1D1 + s20 ** n
        s22 = m / 0.2D1
        s23 = s21 ** s22
        s24 = alpha * s2
        s25 = n - 0.1D1
        s26 = alpha * s2
        s27 = 0.1D1 + s26 ** n
        s28 = -m
        s29 = alpha * s2
        s30 = 0.1D1 + s29 ** n
        s31 = m / 0.2D1
        s32 = s30 ** s31
        s33 = alpha * s2
        s34 = n - 0.1D1
        s35 = alpha * s2
        s36 = 0.1D1 + s35 ** n
        s37 = -m
        s38 = s7 * s33 ** s34
        s39 = alpha * s2
        s40 = n - 0.1D1
        s41 = alpha * s2
        s42 = 0.1D1 + s41 ** n
        s43 = -m
        s44 = alpha * s2
        s45 = alpha * s2
        s46 = 0.1D1 + s45 ** n
        s47 = s7 * s39 ** s40
        s48 = s42 ** s43 * s44 ** n
        s49 = s47 * s48
        s50 = alpha * s2
        s51 = alpha * s2
        s52 = 0.1D1 + s51 ** n
        s53 = s7 * s50 ** n
        s54 = 0.1D1 / s32 / s52
        s55 = (0.1D1 - s24 ** s25 * s27 ** s28) * ((-n + 0.1D1) * s38 * 
     #s36 ** s37 + m * n * s49 / s46)
        s56 = s53 * s54
        s57 = alpha * s2
        s58 = n - 0.1D1
        s59 = alpha * s2
        s60 = 0.1D1 + s59 ** n
        s61 = -m
        s62 = alpha * s2
        s63 = 0.1D1 + s62 ** n
        s64 = m / 0.2D1
        s65 = s63 ** s64
        s66 = alpha * s2
        s67 = n - 0.1D1
        s68 = abs(psi) / psi
        s69 = alpha * s2
        s70 = 0.1D1 + s69 ** n
        s71 = -m
        s72 = s66 ** s67 * s70 ** s71
        s73 = 0.1D1 / s2 ** 2 * s68 ** 2
        s74 = alpha * s2
        s75 = n - 0.1D1
        s76 = alpha * s2
        s77 = 0.1D1 + s76 ** n
        s78 = -m
        s79 = s74 ** s75 * s77 ** s78
        s80 = 0.1D1 / s2 * signum(1, psi)
        s81 = alpha * s2
        s82 = n - 0.1D1
        s83 = alpha * s2
        s84 = 0.1D1 + s83 ** n
        s85 = -m
        s86 = s73 * s81 ** s82
        s87 = alpha * s2
        s88 = n - 0.1D1
        s89 = alpha * s2
        s90 = 0.1D1 + s89 ** n
        s91 = -m
        s92 = alpha * s2
        s93 = alpha * s2
        s94 = 0.1D1 + s93 ** n
        s95 = s73 * s87 ** s88
        s96 = s90 ** s91 * s92 ** n
        s97 = s95 * s96
        s98 = alpha * s2
        s99 = n - 0.1D1
        s100 = alpha * s2
        s101 = 0.1D1 + s100 ** n
        s102 = -m
        s103 = alpha * s2
        s104 = s103 ** n
        s105 = alpha * s2
        s106 = 0.1D1 + s105 ** n
        s107 = s73 * s101 ** s102
        s108 = s98 ** s99 * s104 ** 2
        s109 = s107 * s108
        s110 = alpha * s2
        s111 = n - 0.1D1
        s112 = alpha * s2
        s113 = 0.1D1 + s112 ** n
        s114 = -m
        s115 = alpha * s2
        s116 = alpha * s2
        s117 = 0.1D1 + s116 ** n
        s118 = s73 * s110 ** s111
        s119 = s113 ** s114 * s115 ** n
        s120 = s118 * s119
        s121 = alpha * s2
        s122 = n - 0.1D1
        s123 = alpha * s2
        s124 = 0.1D1 + s123 ** n
        s125 = -m
        s126 = alpha * s2
        s127 = alpha * s2
        s128 = 0.1D1 + s127 ** n
        s129 = s80 * s121 ** s122
        s130 = s124 ** s125 * s126 ** n
        s131 = s129 * s130
        s132 = alpha * s2
        s133 = n - 0.1D1
        s134 = alpha * s2
        s135 = 0.1D1 + s134 ** n
        s136 = -m
        s137 = alpha * s2
        s138 = alpha * s2
        s139 = 0.1D1 + s138 ** n
        s140 = s73 * s132 ** s133
        s141 = s135 ** s136 * s137 ** n
        s142 = s140 * s141
        s143 = alpha * s2
        s144 = n - 0.1D1
        s145 = alpha * s2
        s146 = 0.1D1 + s145 ** n
        s147 = -m
        s148 = alpha * s2
        s149 = s148 ** n
        s150 = alpha * s2
        s151 = 0.1D1 + s150 ** n
        s152 = s73 * s143 ** s144
        s153 = s146 ** s147 * s149 ** 2
        s154 = s152 * s153
        s155 = 0.1D1 / s65 * (0.1D1 - s57 ** s58 * s60 ** s61)
        s156 = alpha * s2
        s157 = n - 0.1D1
        s158 = alpha * s2
        s159 = 0.1D1 + s158 ** n
        s160 = -m
        s161 = 0.1D1 - s156 ** s157 * s159 ** s160
        s162 = alpha * s2
        s163 = 0.1D1 + s162 ** n
        s164 = m / 0.2D1
        s165 = s163 ** s164
        s166 = alpha * s2
        s167 = s166 ** n
        s168 = alpha * s2
        s169 = 0.1D1 + s168 ** n
        s170 = s73 * s161 ** 2
        s171 = 0.1D1 / s165 * s167 ** 2
        s172 = s170 * s171
        s173 = alpha * s2
        s174 = n - 0.1D1
        s175 = alpha * s2
        s176 = 0.1D1 + s175 ** n
        s177 = -m
        s178 = 0.1D1 - s173 ** s174 * s176 ** s177
        s179 = alpha * s2
        s180 = 0.1D1 + s179 ** n
        s181 = m / 0.2D1
        s182 = s180 ** s181
        s183 = alpha * s2
        s184 = alpha * s2
        s185 = 0.1D1 + s184 ** n
        s186 = s73 * s183 ** n
        s187 = s178 ** 2 / s182
        s188 = s186 * s187
        s189 = alpha * s2
        s190 = n - 0.1D1
        s191 = alpha * s2
        s192 = 0.1D1 + s191 ** n
        s193 = -m
        s194 = 0.1D1 - s189 ** s190 * s192 ** s193
        s195 = alpha * s2
        s196 = 0.1D1 + s195 ** n
        s197 = m / 0.2D1
        s198 = s196 ** s197
        s199 = alpha * s2
        s200 = alpha * s2
        s201 = 0.1D1 + s200 ** n
        s202 = s80 * s199 ** n
        s203 = s194 ** 2 / s198
        s204 = s202 * s203
        s205 = alpha * s2
        s206 = n - 0.1D1
        s207 = alpha * s2
        s208 = 0.1D1 + s207 ** n
        s209 = -m
        s210 = 0.1D1 - s205 ** s206 * s208 ** s209
        s211 = alpha * s2
        s212 = 0.1D1 + s211 ** n
        s213 = m / 0.2D1
        s214 = s212 ** s213
        s215 = alpha * s2
        s216 = alpha * s2
        s217 = 0.1D1 + s216 ** n
        s218 = s73 * s215 ** n
        s219 = s210 ** 2 / s214
        s220 = s218 * s219
        s221 = alpha * s2
        s222 = n - 0.1D1
        s223 = alpha * s2
        s224 = 0.1D1 + s223 ** n
        s225 = -m
        s226 = 0.1D1 - s221 ** s222 * s224 ** s225
        s227 = alpha * s2
        s228 = 0.1D1 + s227 ** n
        s229 = m / 0.2D1
        s230 = s228 ** s229
        s231 = alpha * s2
        s232 = s231 ** n
        s233 = alpha * s2
        s234 = 0.1D1 + s233 ** n
        s235 = s73 * s226 ** 2
        s236 = 0.1D1 / s230 * s232 ** 2
        s237 = s235 * s236
        cg = 0.2D1 * ks * s19 ** 2 / s23 - 0.2D1 * ks * m * n * s55 * s5
     #6 + 0.2D1 * ks * s155 * (-(n - 0.1D1) ** 2 * s72 * s73 + (-n + 0.1
     #D1) * s79 * s80 + (n - 0.1D1) * s86 * s84 ** s85 + (0.2D1 * n - 0.
     #2D1) * m * n * s97 / s94 - m ** 2 * n ** 2 * s109 / s106 ** 2 + m 
     #* n ** 2 * s120 / s117 + m * n * s131 / s128 - m * n * s142 / s139
     # - m * n ** 2 * s154 / s151 ** 2) + ks * m ** 2 * n ** 2 * s172 / 
     #s169 ** 2 / 0.4D1 - ks * m * n ** 2 * s188 / s185 / 0.2D1 - ks * m
     # * n * s204 / s201 / 0.2D1 + ks * m * n * s220 / s217 / 0.2D1 + ks
     # * m * n ** 2 * s237 / s234 ** 2 / 0.2D1
        return
      end
> 
> Fortran(volcon,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function volcon (psi)
        doubleprecision psi
        volcon = (thetas - thetar) / (0.1D1 + (alpha * abs(psi)) ** n) *
     #* m + thetar
        return
      end
> Fortran(dvolco,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function dvolco (psi)
        doubleprecision psi
        dvolco = -(thetas - thetar) / (0.1D1 + (alpha * abs(psi)) ** n) 
     #** m * m * (alpha * abs(psi)) ** n * n * abs(psi) / psi / abs(psi)
     # / (0.1D1 + (alpha * abs(psi)) ** n)
        return
      end
> Fortran(ddvolc,optimize=true,deducetypes=false,defaulttype=float);
Warning, unable to optimize
Warning, the function names {signum} are not recognized in the target language
Warning, procedure/module options ignored
      doubleprecision function ddvolc (psi)
        doubleprecision psi
        ddvolc = (thetas - thetar) / (0.1D1 + (alpha * abs(psi)) ** n) *
     #* m * m ** 2 * ((alpha * abs(psi)) ** n) ** 2 * n ** 2 * abs(psi) 
     #/ psi ** 2 / abs(psi) ** 2 / (0.1D1 + (alpha * abs(psi)) ** n) ** 
     #2 - (thetas - thetar) / (0.1D1 + (alpha * abs(psi)) ** n) ** m * m
     # * (alpha * abs(psi)) ** n * n ** 2 * abs(psi) / psi ** 2 / abs(ps
     #i) ** 2 / (0.1D1 + (alpha * abs(psi)) ** n) - (thetas - thetar) / 
     #(0.1D1 + (alpha * abs(psi)) ** n) ** m * m * (alpha * abs(psi)) **
     # n * n * signum(1, psi) / abs(psi) / (0.1D1 + (alpha * abs(psi)) *
     #* n) + (thetas - thetar) / (0.1D1 + (alpha * abs(psi)) ** n) ** m 
     #* m * (alpha * abs(psi)) ** n * n * abs(psi) / psi ** 2 / abs(psi)
     # ** 2 / (0.1D1 + (alpha * abs(psi)) ** n) + (thetas - thetar) / (0
     #.1D1 + (alpha * abs(psi)) ** n) ** m * m * ((alpha * abs(psi)) ** 
     #n) ** 2 * n ** 2 * abs(psi) / psi ** 2 / abs(psi) ** 2 / (0.1D1 + 
     #(alpha * abs(psi)) ** n) ** 2
        return
      end
> quit
memory used=52.3MB, alloc=44.3MB, time=0.85
